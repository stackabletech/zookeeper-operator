---
defaultChannel: preview
description: |-
  # OLM installation files

  OLM documentation https://olm.operatorframework.io/docs/tasks/

  ## Build and publish operator bundle image
  ### Generate operator bundle

      opm alpha bundle generate --directory manifests --package zookeeper-operator --output-dir bundle --channels stable --default stable

  ### Build bundle image

      docker build -t docker.stackable.tech/stackable/zookeeper-operator-bundle:latest -f bundle.Dockerfile .
      docker push docker.stackable.tech/stackable/zookeeper-operator-bundle:latest

  ### Validate bundle image

      opm alpha bundle validate --tag docker.stackable.tech/stackable/zookeeper-operator-bundle:latest --image-builder docker

  ## Create catalog

      mkdir catalog
      opm generate dockerfile catalog
      opm init zookeeper-operator \
      --default-channel=preview \
      --description=./README.md \
      --output yaml > catalog/operator.yaml
name: zookeeper-operator
schema: olm.package
---
schema: olm.channel
package: zookeeper-operator
name: preview
entries:
  - name: zookeeper-operator.v0.10.0
---
image: docker.stackable.tech/stackable/zookeeper-operator-bundle:latest
name: zookeeper-operator.v0.10.0
package: zookeeper-operator
properties:
  - type: olm.gvk
    value:
      group: zookeeper.stackable.tech
      kind: ZookeeperCluster
      version: v1alpha1
  - type: olm.gvk
    value:
      group: zookeeper.stackable.tech
      kind: ZookeeperZnode
      version: v1alpha1
  - type: olm.package
    value:
      packageName: zookeeper-operator
      version: 0.10.0
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoib3BlcmF0b3JzLmNvcmVvcy5jb20vdjFhbHBoYTEiLCJraW5kIjoiQ2x1c3RlclNlcnZpY2VWZXJzaW9uIiwibWV0YWRhdGEiOnsibmFtZSI6Inpvb2tlZXBlci1vcGVyYXRvci52MC4xMC4wIn0sInNwZWMiOnsiYW5ub3RhdGlvbnMiOnsiY2FwYWJpbGl0aWVzIjoiRnVsbCBMaWZlY3ljbGUiLCJjYXRlZ29yaWVzIjoiU3RvcmFnZSIsImRlc2NyaXB0aW9uIjoiQXBhY2hlIFpvb2tlZXBlciBmb3IgdGhlIFN0YWNrYWJsZSBwbGF0Zm9ybSIsIm9sbS5wcm9wZXJ0aWVzIjoiW10iLCJzdXBwb3J0Ijoic3RhY2thYmxlLnRlY2gifSwiY3VzdG9tcmVzb3VyY2VkZWZpbml0aW9ucyI6eyJvd25lZCI6W3siZGVzY3JpcHRpb24iOiJSZXByZXNlbnRzIGEgWm9va2VlcGVyIGNsdXN0ZXIiLCJkaXNwbGF5TmFtZSI6IkFwYWNoZSBab29rZWVwZXIgQ2x1c3RlciIsImtpbmQiOiJab29rZWVwZXJDbHVzdGVyIiwibmFtZSI6Inpvb2tlZXBlcmNsdXN0ZXJzLnpvb2tlZXBlci5zdGFja2FibGUudGVjaCIsInZlcnNpb24iOiJ2MWFscGhhMSJ9LHsiZGVzY3JpcHRpb24iOiJSZXByZXNlbnRzIGEgWm9va2VlcGVyIG5vZGUgaW4gYSBjbHVzdGVyIiwiZGlzcGxheU5hbWUiOiJBcGFjaGUgWm9va2VlcGVyIG5vZGUiLCJraW5kIjoiWm9va2VlcGVyWm5vZGUiLCJuYW1lIjoiem9va2VlcGVyem5vZGVzLnpvb2tlZXBlci5zdGFja2FibGUudGVjaCIsInZlcnNpb24iOiJ2MWFscGhhMSJ9XX0sImRlc2NyaXB0aW9uIjoiU3RhY2thYmxlIG9wZXJhdG9yIGZvciBBcGFjaGUgWm9va2VlcGVyIiwiZGlzcGxheU5hbWUiOiJBcGFjaGUgWm9va2VlcGVyIE9wZXJhdG9yIiwiaW5zdGFsbCI6eyJzcGVjIjp7ImNsdXN0ZXJQZXJtaXNzaW9ucyI6W3sicnVsZXMiOlt7ImFwaUdyb3VwcyI6WyIiXSwicmVzb3VyY2VzIjpbIm5vZGVzIl0sInZlcmJzIjpbImxpc3QiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyIiXSwicmVzb3VyY2VzIjpbInBvZHMiLCJjb25maWdtYXBzIiwic2VjcmV0cyIsInNlcnZpY2VzIiwiZW5kcG9pbnRzIiwic2VydmljZWFjY291bnRzIl0sInZlcmJzIjpbImNyZWF0ZSIsImRlbGV0ZSIsImdldCIsImxpc3QiLCJwYXRjaCIsInVwZGF0ZSIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbInJiYWMuYXV0aG9yaXphdGlvbi5rOHMuaW8iXSwicmVzb3VyY2VzIjpbInJvbGViaW5kaW5ncyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJyYmFjLmF1dGhvcml6YXRpb24uazhzLmlvIl0sInJlc291cmNlTmFtZXMiOlsiem9va2VlcGVyLWNsdXN0ZXJyb2xlIl0sInJlc291cmNlcyI6WyJjbHVzdGVycm9sZXMiXSwidmVyYnMiOlsiYmluZCJdfSx7ImFwaUdyb3VwcyI6WyJhcHBzIl0sInJlc291cmNlcyI6WyJzdGF0ZWZ1bHNldHMiXSwidmVyYnMiOlsiY3JlYXRlIiwiZGVsZXRlIiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiYmF0Y2giXSwicmVzb3VyY2VzIjpbImpvYnMiXSwidmVyYnMiOlsiY3JlYXRlIiwiZ2V0IiwibGlzdCIsInBhdGNoIiwidXBkYXRlIiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiYXBpZXh0ZW5zaW9ucy5rOHMuaW8iXSwicmVzb3VyY2VzIjpbImN1c3RvbXJlc291cmNlZGVmaW5pdGlvbnMiXSwidmVyYnMiOlsiZ2V0Il19LHsiYXBpR3JvdXBzIjpbImF1dGhlbnRpY2F0aW9uLnN0YWNrYWJsZS50ZWNoIl0sInJlc291cmNlcyI6WyJhdXRoZW50aWNhdGlvbmNsYXNzZXMiXSwidmVyYnMiOlsiZ2V0IiwibGlzdCIsIndhdGNoIl19LHsiYXBpR3JvdXBzIjpbImV2ZW50cy5rOHMuaW8iXSwicmVzb3VyY2VzIjpbImV2ZW50cyJdLCJ2ZXJicyI6WyJjcmVhdGUiXX0seyJhcGlHcm91cHMiOlsiem9va2VlcGVyLnN0YWNrYWJsZS50ZWNoIl0sInJlc291cmNlcyI6WyJ6b29rZWVwZXJjbHVzdGVycyIsInpvb2tlZXBlcnpub2RlcyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0IiwicGF0Y2giLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJ6b29rZWVwZXIuc3RhY2thYmxlLnRlY2giXSwicmVzb3VyY2VzIjpbInpvb2tlZXBlcmNsdXN0ZXJzL3N0YXR1cyJdLCJ2ZXJicyI6WyJwYXRjaCJdfV0sInNlcnZpY2VBY2NvdW50TmFtZSI6Inpvb2tlZXBlci1vcGVyYXRvciJ9XSwiZGVwbG95bWVudHMiOlt7Im5hbWUiOiJ6b29rZWVwZXItb3BlcmF0b3IiLCJzcGVjIjp7InJlcGxpY2FzIjoxLCJzZWxlY3RvciI6eyJtYXRjaExhYmVscyI6eyJhcHAua3ViZXJuZXRlcy5pby9pbnN0YW5jZSI6Inpvb2tlZXBlci1vcGVyYXRvciIsImFwcC5rdWJlcm5ldGVzLmlvL25hbWUiOiJ6b29rZWVwZXItb3BlcmF0b3IifX0sInN0cmF0ZWd5Ijp7InR5cGUiOiJSZWNyZWF0ZSJ9LCJ0ZW1wbGF0ZSI6eyJtZXRhZGF0YSI6eyJsYWJlbHMiOnsiYXBwLmt1YmVybmV0ZXMuaW8vaW5zdGFuY2UiOiJ6b29rZWVwZXItb3BlcmF0b3IiLCJhcHAua3ViZXJuZXRlcy5pby9uYW1lIjoiem9va2VlcGVyLW9wZXJhdG9yIn19LCJzcGVjIjp7ImNvbnRhaW5lcnMiOlt7ImltYWdlIjoiZG9ja2VyLnN0YWNrYWJsZS50ZWNoL3N0YWNrYWJsZS96b29rZWVwZXItb3BlcmF0b3I6MC4xMC4wIiwiaW1hZ2VQdWxsUG9saWN5IjoiSWZOb3RQcmVzZW50IiwibmFtZSI6Inpvb2tlZXBlci1vcGVyYXRvciIsInJlc291cmNlcyI6e30sInNlY3VyaXR5Q29udGV4dCI6e30sInZvbHVtZU1vdW50cyI6W3sibW91bnRQYXRoIjoiL2V0Yy9zdGFja2FibGUvem9va2VlcGVyLW9wZXJhdG9yL2NvbmZpZy1zcGVjIiwibmFtZSI6ImNvbmZpZy1zcGVjIn1dfV0sInNlY3VyaXR5Q29udGV4dCI6e30sInNlcnZpY2VBY2NvdW50TmFtZSI6Inpvb2tlZXBlci1vcGVyYXRvciIsInZvbHVtZXMiOlt7ImNvbmZpZ01hcCI6eyJuYW1lIjoiem9va2VlcGVyLW9wZXJhdG9yLWNvbmZpZ21hcCJ9LCJuYW1lIjoiY29uZmlnLXNwZWMifV19fX19XSwicGVybWlzc2lvbnMiOlt7InJ1bGVzIjpbeyJhcGlHcm91cHMiOlsiIl0sInJlc291cmNlcyI6WyJwb2RzIl0sInZlcmJzIjpbIioiXX1dLCJzZXJ2aWNlQWNjb3VudE5hbWUiOiJ6b29rZWVwZXItb3BlcmF0b3IifV19LCJzdHJhdGVneSI6ImRlcGxveW1lbnQifSwiaW5zdGFsbE1vZGVzIjpbeyJzdXBwb3J0ZWQiOnRydWUsInR5cGUiOiJPd25OYW1lc3BhY2UifSx7InN1cHBvcnRlZCI6dHJ1ZSwidHlwZSI6IlNpbmdsZU5hbWVzcGFjZSJ9LHsic3VwcG9ydGVkIjpmYWxzZSwidHlwZSI6Ik11bHRpTmFtZXNwYWNlIn0seyJzdXBwb3J0ZWQiOnRydWUsInR5cGUiOiJBbGxOYW1lc3BhY2VzIn1dLCJrZXl3b3JkcyI6WyJ6b29rZWVwZXIiXSwibWFpbnRhaW5lcnMiOlt7ImVtYWlsIjoiaW5mb0BzdGFja2FibGUudGVjaCIsIm5hbWUiOiJTdGFja2FibGUgR21iSCJ9XSwibWF0dXJpdHkiOiJzdGFibGUiLCJtaW5LdWJlVmVyc2lvbiI6IjEuMjAuMCIsInByb3ZpZGVyIjp7Im5hbWUiOiJTdGFja2FibGUgR21iSCIsInVybCI6Imh0dHBzOi8vc3RhY2thYmxlLnRlY2gifSwidmVyc2lvbiI6IjAuMTAuMCJ9fQ==
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7Im5hbWUiOiJ6b29rZWVwZXItY2x1c3RlcnJvbGUifSwicnVsZXMiOlt7ImFwaUdyb3VwcyI6WyIiXSwicmVzb3VyY2VzIjpbImNvbmZpZ21hcHMiLCJzZWNyZXRzIiwic2VydmljZWFjY291bnRzIl0sInZlcmJzIjpbImdldCJdfSx7ImFwaUdyb3VwcyI6WyJldmVudHMuazhzLmlvIl0sInJlc291cmNlcyI6WyJldmVudHMiXSwidmVyYnMiOlsiY3JlYXRlIl19LHsiYXBpR3JvdXBzIjpbInNlY3VyaXR5Lm9wZW5zaGlmdC5pbyJdLCJyZXNvdXJjZU5hbWVzIjpbImhvc3Rtb3VudC1hbnl1aWQiXSwicmVzb3VyY2VzIjpbInNlY3VyaXR5Y29udGV4dGNvbnN0cmFpbnRzIl0sInZlcmJzIjpbInVzZSJdfV19
  - type: olm.bundle.object
    value:
      data: 
  - type: olm.bundle.object
    value:
      data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsibmFtZSI6Inpvb2tlZXBlcnpub2Rlcy56b29rZWVwZXIuc3RhY2thYmxlLnRlY2gifSwic3BlYyI6eyJncm91cCI6Inpvb2tlZXBlci5zdGFja2FibGUudGVjaCIsIm5hbWVzIjp7ImNhdGVnb3JpZXMiOltdLCJraW5kIjoiWm9va2VlcGVyWm5vZGUiLCJwbHVyYWwiOiJ6b29rZWVwZXJ6bm9kZXMiLCJzaG9ydE5hbWVzIjpbInpubyIsInpub2RlIl0sInNpbmd1bGFyIjoiem9va2VlcGVyem5vZGUifSwic2NvcGUiOiJOYW1lc3BhY2VkIiwidmVyc2lvbnMiOlt7ImFkZGl0aW9uYWxQcmludGVyQ29sdW1ucyI6W10sIm5hbWUiOiJ2MWFscGhhMSIsInNjaGVtYSI6eyJvcGVuQVBJVjNTY2hlbWEiOnsiZGVzY3JpcHRpb24iOiJBdXRvLWdlbmVyYXRlZCBkZXJpdmVkIHR5cGUgZm9yIFpvb2tlZXBlclpub2RlU3BlYyB2aWEgYEN1c3RvbVJlc291cmNlYCIsInByb3BlcnRpZXMiOnsic3BlYyI6eyJkZXNjcmlwdGlvbiI6IkEgY2xhaW0gZm9yIGEgc2luZ2xlIFpvb0tlZXBlciBaTm9kZSB0cmVlIChmaWxlc3lzdGVtIG5vZGUpXG5cbkEgYENvbmZpZ01hcGAgd2lsbCBhdXRvbWF0aWNhbGx5IGJlIGNyZWF0ZWQgd2l0aCB0aGUgc2FtZSBuYW1lLCBjb250YWluaW5nIHRoZSBjb25uZWN0aW9uIHN0cmluZyBpbiB0aGUgZmllbGQgYFpPT0tFRVBFUmAuIEVhY2ggYFpvb2tlZXBlclpub2RlYCBnZXRzIGFuIGlzb2xhdGVkIFpOb2RlIGNocm9vdCwgd2hpY2ggdGhlIGBaT09LRUVQRVJgIGF1dG9tYXRpY2FsbHkgY29udGFpbnMuIEFsbCBkYXRhIGluc2lkZSBvZiB0aGlzIGNocm9vdCB3aWxsIGJlIGRlbGV0ZWQgd2hlbiB0aGUgY29ycmVzcG9uZGluZyBgWm9va2VlcGVyWm5vZGVgIGlzLlxuXG5gWm9va2VlcGVyWm5vZGVgIGlzICpub3QqIGRlc2lnbmVkIHRvIG1hbmFnZSB0aGUgY29udGVudHMgb2YgdGhpcyBaTm9kZS4gSW5zdGVhZCwgaXQgc2hvdWxkIGJlIHVzZWQgdG8gY3JlYXRlIGEgY2hyb290IGZvciBhbiBpbnN0YWxsYXRpb24gb2YgYW4gYXBwbGljYXRpb24gdG8gd29yayBpbnNpZGUuIEluaXRpYWxpemluZyB0aGUgY29udGVudHMgaXMgdGhlIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBhcHBsaWNhdGlvbi4iLCJwcm9wZXJ0aWVzIjp7ImNsdXN0ZXJSZWYiOnsiZGVmYXVsdCI6eyJuYW1lIjpudWxsLCJuYW1lc3BhY2UiOm51bGx9LCJkZXNjcmlwdGlvbiI6IkEgcmVmZXJlbmNlIHRvIGEgcHJvZHVjdCBjbHVzdGVyIChmb3IgZXhhbXBsZSwgYSBgWm9va2VlcGVyQ2x1c3RlcmApXG5cbmBuYW1lc3BhY2VgJ3MgZGVmYXVsdGluZyBvbmx5IGFwcGxpZXMgd2hlbiByZXRyaWV2ZWQgdmlhIFtgQ2x1c3RlclJlZjo6bmFtZXNwYWNlX3JlbGF0aXZlX2Zyb21gXSIsInByb3BlcnRpZXMiOnsibmFtZSI6eyJkZXNjcmlwdGlvbiI6IlRoZSBuYW1lIG9mIHRoZSBjbHVzdGVyIiwibnVsbGFibGUiOnRydWUsInR5cGUiOiJzdHJpbmcifSwibmFtZXNwYWNlIjp7ImRlc2NyaXB0aW9uIjoiVGhlIG5hbWVzcGFjZSBvZiB0aGUgY2x1c3RlclxuXG5UaGlzIGZpZWxkIGlzIG9wdGlvbmFsLCBhbmQgd2lsbCBkZWZhdWx0IHRvIHRoZSBuYW1lc3BhY2Ugb2YgdGhlIHJlZmVycmluZyBvYmplY3QuIiwibnVsbGFibGUiOnRydWUsInR5cGUiOiJzdHJpbmcifX0sInR5cGUiOiJvYmplY3QifX0sInR5cGUiOiJvYmplY3QifX0sInJlcXVpcmVkIjpbInNwZWMiXSwidGl0bGUiOiJab29rZWVwZXJabm9kZSIsInR5cGUiOiJvYmplY3QifX0sInNlcnZlZCI6dHJ1ZSwic3RvcmFnZSI6dHJ1ZSwic3VicmVzb3VyY2VzIjp7fX1dfX0=
relatedImages:
  - image: docker.stackable.tech/stackable/zookeeper-operator-bundle:latest
    name: ""
  - image: docker.stackable.tech/stackable/zookeeper-operator:0.10.0
    name: ""
schema: olm.bundle
